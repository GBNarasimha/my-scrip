//+------------------------------------------------------------------+
//|                                            XAUUSD_ScalpingPro.mq5 |
//|                                  Copyright 2025, Your Name       |
//|                                             https://www.mql5.com |
//+------------------------------------------------------------------+
#property copyright "Copyright 2025, Your Name"
#property link      "https://www.mql5.com"
#property version   "1.00"
#property indicator_chart_window
#property indicator_buffers 6
#property indicator_plots   6

// Plot settings
#property indicator_label1  "Buy Signal"
#property indicator_type1   DRAW_ARROW
#property indicator_color1  clrLime
#property indicator_style1  STYLE_SOLID
#property indicator_width1  3

#property indicator_label2  "Sell Signal"
#property indicator_type2   DRAW_ARROW
#property indicator_color2  clrRed
#property indicator_style2  STYLE_SOLID
#property indicator_width2  3

#property indicator_label3  "Support Level"
#property indicator_type3   DRAW_LINE
#property indicator_color3  clrBlue
#property indicator_style3  STYLE_DOT
#property indicator_width3  1

#property indicator_label4  "Resistance Level"
#property indicator_type4   DRAW_LINE
#property indicator_color4  clrRed
#property indicator_style4  STYLE_DOT
#property indicator_width4  1

#property indicator_label5  "EMA 20"
#property indicator_type5   DRAW_LINE
#property indicator_color5  clrYellow
#property indicator_style5  STYLE_SOLID
#property indicator_width5  2

#property indicator_label6  "Volume Spike"
#property indicator_type6   DRAW_HISTOGRAM
#property indicator_color6  clrOrange
#property indicator_style6  STYLE_SOLID
#property indicator_width6  2

// Input parameters
input int RSI_Period = 14;
input int RSI_Overbought = 70;
input int RSI_Oversold = 30;
input int MACD_Fast = 12;
input int MACD_Slow = 26;
input int MACD_Signal = 9;
input int EMA_Period = 20;
input int BB_Period = 20;
input double BB_Deviation = 2.0;
input int Volume_Spike_Factor = 2;
input double Support_Resistance_Threshold = 5.0; // pips
input bool Show_Alerts = true;
input bool Filter_Trading_Hours = true;

// Buffers
double BuySignalBuffer[];
double SellSignalBuffer[];
double SupportBuffer[];
double ResistanceBuffer[];
double EMABuffer[];
double VolumeBuffer[];

// Handles for indicators
int RSI_Handle;
int MACD_Handle;
int BB_Handle;
int Volume_Handle;

// Global variables
datetime LastAlertTime = 0;

//+------------------------------------------------------------------+
//| Custom indicator initialization function                         |
//+------------------------------------------------------------------+
int OnInit()
{
    // Set indicator buffers
    SetIndexBuffer(0, BuySignalBuffer, INDICATOR_DATA);
    SetIndexBuffer(1, SellSignalBuffer, INDICATOR_DATA);
    SetIndexBuffer(2, SupportBuffer, INDICATOR_DATA);
    SetIndexBuffer(3, ResistanceBuffer, INDICATOR_DATA);
    SetIndexBuffer(4, EMABuffer, INDICATOR_DATA);
    SetIndexBuffer(5, VolumeBuffer, INDICATOR_DATA);
    
    // Set arrow codes
    PlotIndexSetInteger(0, PLOT_ARROW, 233); // Up arrow for buy
    PlotIndexSetInteger(1, PLOT_ARROW, 234); // Down arrow for sell
    
    // Initialize indicator handles
    RSI_Handle = iRSI(_Symbol, PERIOD_CURRENT, RSI_Period, PRICE_CLOSE);
    MACD_Handle = iMACD(_Symbol, PERIOD_CURRENT, MACD_Fast, MACD_Slow, MACD_Signal, PRICE_CLOSE);
    BB_Handle = iBands(_Symbol, PERIOD_CURRENT, BB_Period, 0, BB_Deviation, PRICE_CLOSE);
    Volume_Handle = iVolumes(_Symbol, PERIOD_CURRENT, VOLUME_TICK);
    
    // Check handles
    if(RSI_Handle == INVALID_HANDLE || MACD_Handle == INVALID_HANDLE || 
       BB_Handle == INVALID_HANDLE || Volume_Handle == INVALID_HANDLE)
    {
        Print("Error creating indicator handles");
        return(INIT_FAILED);
    }
    
    // Set indicator name
    IndicatorSetString(INDICATOR_SHORTNAME, "XAUUSD Scalping Pro");
    
    return(INIT_SUCCEEDED);
}

//+------------------------------------------------------------------+
//| Custom indicator iteration function                              |
//+------------------------------------------------------------------+
int OnCalculate(const int rates_total,
                const int prev_calculated,
                const datetime &time[],
                const double &open[],
                const double &high[],
                const double &low[],
                const double &close[],
                const long &tick_volume[],
                const long &volume[],
                const int &spread[])
{
    if(rates_total < 50) return(0);
    
    int start = MathMax(prev_calculated - 1, 0);
    
    // Get indicator data
    double rsi[], macd_main[], macd_signal[], bb_upper[], bb_lower[], vol[];
    
    if(CopyBuffer(RSI_Handle, 0, 0, rates_total, rsi) <= 0) return(0);
    if(CopyBuffer(MACD_Handle, 0, 0, rates_total, macd_main) <= 0) return(0);
    if(CopyBuffer(MACD_Handle, 1, 0, rates_total, macd_signal) <= 0) return(0);
    if(CopyBuffer(BB_Handle, 1, 0, rates_total, bb_upper) <= 0) return(0);
    if(CopyBuffer(BB_Handle, 2, 0, rates_total, bb_lower) <= 0) return(0);
    if(CopyBuffer(Volume_Handle, 0, 0, rates_total, vol) <= 0) return(0);
    
    // Calculate EMA
    for(int i = start; i < rates_total; i++)
    {
        if(i == 0)
            EMABuffer[i] = close[i];
        else
            EMABuffer[i] = (close[i] * (2.0/(EMA_Period+1))) + (EMABuffer[i-1] * (1.0-(2.0/(EMA_Period+1))));
    }
    
    // Main calculation loop
    for(int i = start; i < rates_total - 1; i++)
    {
        // Initialize buffers
        BuySignalBuffer[i] = EMPTY_VALUE;
        SellSignalBuffer[i] = EMPTY_VALUE;
        SupportBuffer[i] = EMPTY_VALUE;
        ResistanceBuffer[i] = EMPTY_VALUE;
        VolumeBuffer[i] = 0;
        
        if(i < 10) continue; // Need enough history
        
        // Check trading hours
        if(Filter_Trading_Hours && !IsGoodTradingTime(time[i]))
            continue;
        
        // Calculate support and resistance levels
        double support = FindSupportLevel(low, i, 20);
        double resistance = FindResistanceLevel(high, i, 20);
        
        if(support > 0) SupportBuffer[i] = support;
        if(resistance > 0) ResistanceBuffer[i] = resistance;
        
        // Volume analysis
        double avgVolume = 0;
        for(int j = i-10; j < i; j++)
            avgVolume += vol[j];
        avgVolume /= 10;
        
        bool volumeSpike = vol[i] > avgVolume * Volume_Spike_Factor;
        if(volumeSpike) VolumeBuffer[i] = vol[i];
        
        // BUY SIGNAL LOGIC with RSI Filter
        if(CheckBuySignal(i, close, high, low, open, rsi, macd_main, macd_signal, bb_lower, vol, support, avgVolume))
        {
            BuySignalBuffer[i] = low[i] - 20 * _Point;
            if(Show_Alerts && time[i] != LastAlertTime)
            {
                Alert("XAUUSD BUY SIGNAL at ", DoubleToString(close[i], _Digits));
                LastAlertTime = time[i];
            }
        }
        
        // SELL SIGNAL LOGIC
        if(CheckSellSignal(i, close, high, low, open, rsi, macd_main, macd_signal, bb_upper, vol, resistance, avgVolume))
        {
            SellSignalBuffer[i] = high[i] + 20 * _Point;
            if(Show_Alerts && time[i] != LastAlertTime)
            {
                Alert("XAUUSD SELL SIGNAL at ", DoubleToString(close[i], _Digits));
                LastAlertTime = time[i];
            }
        }
    }
    
    return(rates_total);
}

//+------------------------------------------------------------------+
//| Check Buy Signal with Advanced RSI Filtering                    |
//+------------------------------------------------------------------+
bool CheckBuySignal(int i, const double &close[], const double &high[], const double &low[], 
                   const double &open[], const double &rsi[], const double &macd_main[], 
                   const double &macd_signal[], const double &bb_lower[], const double &vol[], 
                   double support, double avgVolume)
{
    // 1. PRICE STRUCTURE FIRST (Must hit support)
    bool atSupport = (support > 0 && MathAbs(low[i] - support) <= Support_Resistance_Threshold * _Point);
    bool roundNumberSupport = IsRoundNumber(low[i]);
    
    if(!atSupport && !roundNumberSupport) return false;
    
    // 2. RSI DIVERGENCE CHECK (Avoid false RSI signals)
    bool rsiOversold = rsi[i] < RSI_Oversold;
    bool rsiDivergence = CheckBullishDivergence(i, low, rsi);
    
    // Don't buy on RSI alone - need divergence or other confirmations
    if(rsiOversold && !rsiDivergence && !atSupport) return false;
    
    // 3. CANDLESTICK PATTERNS
    bool hammer = IsHammer(i, open, high, low, close);
    bool bullishEngulfing = IsBullishEngulfing(i, open, close);
    bool longLowerWick = (low[i] < close[i] - (high[i] - low[i]) * 0.6);
    
    // 4. VOLUME CONFIRMATION
    bool volumeConfirmation = vol[i] > avgVolume * 1.5;
    
    // 5. TREND FILTER
    bool aboveEMA = close[i] >= EMABuffer[i] || MathAbs(close[i] - EMABuffer[i]) <= 10 * _Point;
    
    // 6. MACD CONFIRMATION
    bool macdBullish = macd_main[i] > macd_signal[i] || 
                      (macd_main[i-1] <= macd_signal[i-1] && macd_main[i] > macd_signal[i]);
    
    // 7. BOLLINGER BANDS
    bool nearLowerBand = close[i] <= bb_lower[i] + 5 * _Point;
    
    // FINAL BUY CONDITION (Multiple confirmations required)
    int confirmations = 0;
    if(atSupport || roundNumberSupport) confirmations++;
    if(rsiDivergence) confirmations++;
    if(hammer || bullishEngulfing || longLowerWick) confirmations++;
    if(volumeConfirmation) confirmations++;
    if(macdBullish) confirmations++;
    if(nearLowerBand) confirmations++;
    
    // Need at least 3 confirmations for buy signal
    return (confirmations >= 3 && aboveEMA);
}

//+------------------------------------------------------------------+
//| Check Sell Signal                                               |
//+------------------------------------------------------------------+
bool CheckSellSignal(int i, const double &close[], const double &high[], const double &low[], 
                    const double &open[], const double &rsi[], const double &macd_main[], 
                    const double &macd_signal[], const double &bb_upper[], const double &vol[], 
                    double resistance, double avgVolume)
{
    // 1. PRICE STRUCTURE
    bool atResistance = (resistance > 0 && MathAbs(high[i] - resistance) <= Support_Resistance_Threshold * _Point);
    bool roundNumberResistance = IsRoundNumber(high[i]);
    
    // 2. RSI OVERBOUGHT
    bool rsiOverbought = rsi[i] > RSI_Overbought;
    bool rsiDivergence = CheckBearishDivergence(i, high, rsi);
    
    // 3. CANDLESTICK PATTERNS
    bool shootingStar = IsShootingStar(i, open, high, low, close);
    bool bearishEngulfing = IsBearishEngulfing(i, open, close);
    bool longUpperWick = (high[i] > close[i] + (high[i] - low[i]) * 0.6);
    
    // 4. VOLUME CONFIRMATION
    bool volumeConfirmation = vol[i] > avgVolume * 1.5;
    
    // 5. MACD CONFIRMATION
    bool macdBearish = macd_main[i] < macd_signal[i] || 
                      (macd_main[i-1] >= macd_signal[i-1] && macd_main[i] < macd_signal[i]);
    
    // 6. BOLLINGER BANDS
    bool nearUpperBand = close[i] >= bb_upper[i] - 5 * _Point;
    
    // FINAL SELL CONDITION
    int confirmations = 0;
    if(atResistance || roundNumberResistance) confirmations++;
    if(rsiOverbought || rsiDivergence) confirmations++;
    if(shootingStar || bearishEngulfing || longUpperWick) confirmations++;
    if(volumeConfirmation) confirmations++;
    if(macdBearish) confirmations++;
    if(nearUpperBand) confirmations++;
    
    return (confirmations >= 3);
}

//+------------------------------------------------------------------+
//| Check Bullish Divergence                                        |
//+------------------------------------------------------------------+
bool CheckBullishDivergence(int i, const double &low[], const double &rsi[])
{
    if(i < 10) return false;
    
    // Find recent swing lows
    int prevLow = -1;
    for(int j = i-5; j >= i-15 && j >= 0; j--)
    {
        if(low[j] < low[j-1] && low[j] < low[j+1])
        {
            prevLow = j;
            break;
        }
    }
    
    if(prevLow == -1) return false;
    
    // Check for divergence: lower price low but higher RSI low
    return (low[i] < low[prevLow] && rsi[i] > rsi[prevLow]);
}

//+------------------------------------------------------------------+
//| Check Bearish Divergence                                        |
//+------------------------------------------------------------------+
bool CheckBearishDivergence(int i, const double &high[], const double &rsi[])
{
    if(i < 10) return false;
    
    // Find recent swing highs
    int prevHigh = -1;
    for(int j = i-5; j >= i-15 && j >= 0; j--)
    {
        if(high[j] > high[j-1] && high[j] > high[j+1])
        {
            prevHigh = j;
            break;
        }
    }
    
    if(prevHigh == -1) return false;
    
    // Check for divergence: higher price high but lower RSI high
    return (high[i] > high[prevHigh] && rsi[i] < rsi[prevHigh]);
}

//+------------------------------------------------------------------+
//| Find Support Level                                              |
//+------------------------------------------------------------------+
double FindSupportLevel(const double &low[], int current, int lookback)
{
    double minLow = low[current];
    int touchCount = 0;
    
    for(int i = current-1; i >= current-lookback && i >= 0; i--)
    {
        if(MathAbs(low[i] - minLow) <= Support_Resistance_Threshold * _Point)
            touchCount++;
        else if(low[i] < minLow)
        {
            minLow = low[i];
            touchCount = 1;
        }
    }
    
    return (touchCount >= 2) ? minLow : 0;
}

//+------------------------------------------------------------------+
//| Find Resistance Level                                           |
//+------------------------------------------------------------------+
double FindResistanceLevel(const double &high[], int current, int lookback)
{
    double maxHigh = high[current];
    int touchCount = 0;
    
    for(int i = current-1; i >= current-lookback && i >= 0; i--)
    {
        if(MathAbs(high[i] - maxHigh) <= Support_Resistance_Threshold * _Point)
            touchCount++;
        else if(high[i] > maxHigh)
        {
            maxHigh = high[i];
            touchCount = 1;
        }
    }
    
    return (touchCount >= 2) ? maxHigh : 0;
}

//+------------------------------------------------------------------+
//| Check if price is at round number                               |
//+------------------------------------------------------------------+
bool IsRoundNumber(double price)
{
    double rounded50 = MathRound(price * 2) / 2.0; // .50 levels
    double rounded00 = MathRound(price); // .00 levels
    
    return (MathAbs(price - rounded50) <= 2 * _Point || 
            MathAbs(price - rounded00) <= 2 * _Point);
}

//+------------------------------------------------------------------+
//| Check if current time is good for trading                       |
//+------------------------------------------------------------------+
bool IsGoodTradingTime(datetime time)
{
    MqlDateTime dt;
    TimeToStruct(time, dt);
    
    // London session: 8:00-10:00 GMT
    // NY session: 13:00-15:00 GMT  
    // Overlap: 13:00-15:00 GMT
    
    int hour = dt.hour;
    return (hour >= 8 && hour <= 10) || (hour >= 13 && hour <= 15);
}

//+------------------------------------------------------------------+
//| Candlestick Pattern Functions                                   |
//+------------------------------------------------------------------+
bool IsHammer(int i, const double &open[], const double &high[], const double &low[], const double &close[])
{
    double body = MathAbs(close[i] - open[i]);
    double lowerWick = MathMin(open[i], close[i]) - low[i];
    double upperWick = high[i] - MathMax(open[i], close[i]);
    
    return (lowerWick > body * 2 && upperWick < body * 0.5);
}

bool IsShootingStar(int i, const double &open[], const double &high[], const double &low[], const double &close[])
{
    double body = MathAbs(close[i] - open[i]);
    double upperWick = high[i] - MathMax(open[i], close[i]);
    double lowerWick = MathMin(open[i], close[i]) - low[i];
    
    return (upperWick > body * 2 && lowerWick < body * 0.5);
}

bool IsBullishEngulfing(int i, const double &open[], const double &close[])
{
    return (close[i-1] < open[i-1] && close[i] > open[i] && 
            open[i] < close[i-1] && close[i] > open[i-1]);
}

bool IsBearishEngulfing(int i, const double &open[], const double &close[])
{
    return (close[i-1] > open[i-1] && close[i] < open[i] && 
            open[i] > close[i-1] && close[i] < open[i-1]);
}

//+------------------------------------------------------------------+
//| Custom indicator deinitialization function                      |
//+------------------------------------------------------------------+
void OnDeinit(const int reason)
{
    IndicatorRelease(RSI_Handle);
    IndicatorRelease(MACD_Handle);
    IndicatorRelease(BB_Handle);
    IndicatorRelease(Volume_Handle);
}
